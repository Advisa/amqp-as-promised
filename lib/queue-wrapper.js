// Generated by CoffeeScript 1.7.1
(function() {
  var Q, QueueWrapper, log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = require('bog');

  Q = require('q');

  module.exports = QueueWrapper = (function() {
    function QueueWrapper(conn, queue) {
      this.conn = conn;
      this.queue = queue;
      this.shift = __bind(this.shift, this);
      this.isAutoDelete = __bind(this.isAutoDelete, this);
      this.isDurable = __bind(this.isDurable, this);
      this.unsubscribe = __bind(this.unsubscribe, this);
      this.subscribe = __bind(this.subscribe, this);
      this.unbind = __bind(this.unbind, this);
      this.bind = __bind(this.bind, this);
      this.name = this.queue.name;
      this.queue.on('open', (function(_this) {
        return function(name) {
          return _this.name = name;
        };
      })(this));
    }

    QueueWrapper.prototype.bind = function(ex, topic) {
      var def;
      if (!(ex || typeof ex !== 'object')) {
        throw new Error('Exchange is not an object');
      }
      if (!(topic || typeof topic !== 'string')) {
        throw new Error('Topic is not a string');
      }
      def = Q.defer();
      this.unbind().then((function(_this) {
        return function() {
          log.info('binding:', ex.name, _this.name, topic);
          _this.queue.bind(ex, topic);
          return _this.queue.once('queueBindOk', function() {
            _this._ex = ex;
            _this._topic = topic;
            log.info('queue bound:', _this.name, _this._topic);
            return def.resolve(_this);
          });
        };
      })(this)).done();
      return def.promise;
    };

    QueueWrapper.prototype.unbind = function() {
      var def;
      def = Q.defer();
      if (!this._ex) {
        def.resolve(this);
        return def.promise;
      }
      this.conn.then((function(_this) {
        return function(mq) {
          _this.queue.unbind(_this._ex, _this._topic);
          return _this.queue.once('queueUnbindOk', function() {
            log.info('queue unbound:', _this.name, _this._topic);
            delete _this._ex;
            delete _this._topic;
            return def.resolve(_this);
          });
        };
      })(this)).done();
      return def.promise;
    };

    QueueWrapper.prototype.subscribe = function(opts, callb) {
      var def;
      def = Q.defer();
      if (typeof opts === 'function') {
        callb = opts;
        opts = null;
      }
      opts = opts != null ? opts : {
        ack: false,
        prefetchCount: 1
      };
      if (!(opts || typeof opts !== 'object')) {
        throw new Error('Opts is not an object');
      }
      if (!(callb || typeof callb !== 'function')) {
        throw new Error('Callback is not a function');
      }
      this.unsubscribe().then((function(_this) {
        return function() {
          var wrapper;
          wrapper = function() {
            var err;
            try {
              return callb.apply(null, arguments);
            } catch (_error) {
              err = _error;
              return log.error(err);
            }
          };
          return (_this.queue.subscribe(opts, wrapper)).addCallback(function(ok) {
            var ctag;
            ctag = ok.consumerTag;
            _this._ctag = ctag;
            log.info('subscribed:', _this.name, ctag);
            return def.resolve(_this);
          });
        };
      })(this)).done();
      return def.promise;
    };

    QueueWrapper.prototype.unsubscribe = function() {
      var ctag, def;
      def = Q.defer();
      if (!this._ctag) {
        def.resolve(this);
        return def.promise;
      }
      ctag = this._ctag;
      delete this._ctag;
      this.queue.unsubscribe(ctag);
      log.info('unsubscribed:', this.name, ctag);
      def.resolve(this);
      return def.promise;
    };

    QueueWrapper.prototype.isDurable = function() {
      return this.queue.options.durable;
    };

    QueueWrapper.prototype.isAutoDelete = function() {
      return this.queue.options.autoDelete;
    };

    QueueWrapper.prototype.shift = function() {
      return this.queue.shift.apply(this.queue, arguments);
    };

    return QueueWrapper;

  })();

}).call(this);
