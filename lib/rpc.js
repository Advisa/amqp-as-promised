// Generated by CoffeeScript 1.6.3
(function() {
  var Q, Rpc, ampqc, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ampqc = require('./amqp-client');

  Q = require('q');

  uuid = require('uuid');

  module.exports = Rpc = (function() {
    function Rpc(amqpc) {
      var _this = this;
      this.amqpc = amqpc;
      this.rpc = __bind(this.rpc, this);
      this.resolveResponse = __bind(this.resolveResponse, this);
      this.registerResponse = __bind(this.registerResponse, this);
      this.responses = {};
      this.returnChannel = this.amqpc.queue('', {
        autoDelete: true,
        exclusive: true
      });
      this.returnChannel.then(function(returnChannel) {
        return returnChannel.subscribe(function(msg, headers, deliveryInfo) {
          if (deliveryInfo != null) {
            return _this.resolveResponse(deliveryInfo.correlationId, msg);
          }
        });
      });
    }

    Rpc.prototype.registerResponse = function(corrId) {
      var def;
      def = Q.defer();
      this.responses[corrId] = def;
      return def;
    };

    Rpc.prototype.resolveResponse = function(corrId, msg) {
      if (this.responses[corrId] != null) {
        this.responses[corrId].resolve(msg);
        return delete this.responses[corrId];
      }
    };

    Rpc.prototype.rpc = function(exname, routingKey, msg, headers) {
      var _this = this;
      return Q.all([this.amqpc.exchange(exname), this.returnChannel]).spread(function(ex, q) {
        var def, id;
        id = uuid.v4();
        def = _this.registerResponse(id);
        ex.publish(routingKey, msg, {
          replyTo: q.name,
          correlationId: id,
          headers: headers
        });
        return def.promise;
      });
    };

    return Rpc;

  })();

}).call(this);
