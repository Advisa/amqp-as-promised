// Generated by CoffeeScript 1.7.1
(function() {
  var Cache, Q, Rpc, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  uuid = require('uuid');

  Cache = require('mem-cache');

  module.exports = Rpc = (function() {
    function Rpc(amqpc, options) {
      this.amqpc = amqpc;
      this.rpc = __bind(this.rpc, this);
      this.resolveResponse = __bind(this.resolveResponse, this);
      this.registerResponse = __bind(this.registerResponse, this);
      this.returnChannel = __bind(this.returnChannel, this);
      this.responses = new Cache({
        timeout: (options != null ? options.timeout : void 0) || 1000
      });
      this.responses.on('expired', function(ev) {
        return ev.value.reject(new Error('timeout'));
      });
    }

    Rpc.prototype.returnChannel = function() {
      if (!this._returnChannel) {
        this._returnChannel = this.amqpc.queue('', {
          autoDelete: true,
          exclusive: true
        });
        this._returnChannel.then((function(_this) {
          return function(q) {
            return q.subscribe(function(msg, headers, deliveryInfo) {
              if (deliveryInfo != null) {
                return _this.resolveResponse(deliveryInfo.correlationId, msg);
              }
            });
          };
        })(this));
      }
      return this._returnChannel;
    };

    Rpc.prototype.registerResponse = function(corrId) {
      var def;
      def = Q.defer();
      this.responses.set(corrId, def);
      return def;
    };

    Rpc.prototype.resolveResponse = function(corrId, msg, headers) {
      if (this.responses.get(corrId)) {
        this.responses.get(corrId).resolve(msg);
        return this.responses.remove(corrId);
      }
    };

    Rpc.prototype.rpc = function(exname, routingKey, msg, headers) {
      if (!msg) {
        throw new Error('Must provide msg');
      }
      return Q.all([this.amqpc.exchange(exname), this.returnChannel()]).spread((function(_this) {
        return function(ex, q) {
          var def, id, opts;
          id = uuid.v4();
          def = _this.registerResponse(id);
          opts = {
            replyTo: q.name,
            correlationId: id
          };
          if (headers != null) {
            opts.headers = headers;
          }
          ex.publish(routingKey, msg, opts);
          return def.promise;
        };
      })(this));
    };

    return Rpc;

  })();

}).call(this);
